/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type Escrow = Account<EscrowAccountData>;

export type EscrowAccountData = {
  discriminator: Uint8Array;
  seed: bigint;
  maker: PublicKey;
  mintA: PublicKey;
  mintB: PublicKey;
  receive: bigint;
  bump: number;
};

export type EscrowAccountDataArgs = {
  seed: number | bigint;
  maker: PublicKey;
  mintA: PublicKey;
  mintB: PublicKey;
  receive: number | bigint;
  bump: number;
};

export function getEscrowAccountDataSerializer(): Serializer<
  EscrowAccountDataArgs,
  EscrowAccountData
> {
  return mapSerializer<EscrowAccountDataArgs, any, EscrowAccountData>(
    struct<EscrowAccountData>(
      [
        ['discriminator', bytes({ size: 1 })],
        ['seed', u64()],
        ['maker', publicKeySerializer()],
        ['mintA', publicKeySerializer()],
        ['mintB', publicKeySerializer()],
        ['receive', u64()],
        ['bump', u8()],
      ],
      { description: 'EscrowAccountData' }
    ),
    (value) => ({ ...value, discriminator: new Uint8Array([1]) })
  ) as Serializer<EscrowAccountDataArgs, EscrowAccountData>;
}

export function deserializeEscrow(rawAccount: RpcAccount): Escrow {
  return deserializeAccount(rawAccount, getEscrowAccountDataSerializer());
}

export async function fetchEscrow(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Escrow> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Escrow');
  return deserializeEscrow(maybeAccount);
}

export async function safeFetchEscrow(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Escrow | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeEscrow(maybeAccount) : null;
}

export async function fetchAllEscrow(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Escrow[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Escrow');
    return deserializeEscrow(maybeAccount);
  });
}

export async function safeFetchAllEscrow(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Escrow[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeEscrow(maybeAccount as RpcAccount));
}

export function getEscrowGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'blueshiftAnchorEscrow',
    'HKCR1vRz682tuHzgxEFTGra2dFJdwLcPvtqYiqc9Yyy4'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      seed: number | bigint;
      maker: PublicKey;
      mintA: PublicKey;
      mintB: PublicKey;
      receive: number | bigint;
      bump: number;
    }>({
      discriminator: [0, bytes({ size: 1 })],
      seed: [1, u64()],
      maker: [9, publicKeySerializer()],
      mintA: [41, publicKeySerializer()],
      mintB: [73, publicKeySerializer()],
      receive: [105, u64()],
      bump: [113, u8()],
    })
    .deserializeUsing<Escrow>((account) => deserializeEscrow(account))
    .whereField('discriminator', new Uint8Array([1]));
}
