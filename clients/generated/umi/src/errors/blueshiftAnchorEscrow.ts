/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** InvalidAmount: Invalid amount */
export class InvalidAmountError extends ProgramError {
  override readonly name: string = 'InvalidAmount';

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super('Invalid amount', program, cause);
  }
}
codeToErrorMap.set(0x1770, InvalidAmountError);
nameToErrorMap.set('InvalidAmount', InvalidAmountError);

/** InvalidMaker: Invalid maker */
export class InvalidMakerError extends ProgramError {
  override readonly name: string = 'InvalidMaker';

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super('Invalid maker', program, cause);
  }
}
codeToErrorMap.set(0x1771, InvalidMakerError);
nameToErrorMap.set('InvalidMaker', InvalidMakerError);

/** InvalidMintA: Invalid mint a */
export class InvalidMintAError extends ProgramError {
  override readonly name: string = 'InvalidMintA';

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super('Invalid mint a', program, cause);
  }
}
codeToErrorMap.set(0x1772, InvalidMintAError);
nameToErrorMap.set('InvalidMintA', InvalidMintAError);

/** InvalidMintB: Invalid mint b */
export class InvalidMintBError extends ProgramError {
  override readonly name: string = 'InvalidMintB';

  readonly code: number = 0x1773; // 6003

  constructor(program: Program, cause?: Error) {
    super('Invalid mint b', program, cause);
  }
}
codeToErrorMap.set(0x1773, InvalidMintBError);
nameToErrorMap.set('InvalidMintB', InvalidMintBError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getBlueshiftAnchorEscrowErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getBlueshiftAnchorEscrowErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
