/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type TakeInstructionAccounts = {
  taker: Signer;
  maker: PublicKey | Pda;
  escrow: PublicKey | Pda;
  /** Token Accounts */
  mintA: PublicKey | Pda;
  mintB: PublicKey | Pda;
  vault?: PublicKey | Pda;
  takerAtaA?: PublicKey | Pda;
  takerAtaB?: PublicKey | Pda;
  makerAtaB?: PublicKey | Pda;
  /** Programs */
  associatedTokenProgram?: PublicKey | Pda;
  tokenProgram: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type TakeInstructionData = { discriminator: Uint8Array };

export type TakeInstructionDataArgs = {};

export function getTakeInstructionDataSerializer(): Serializer<
  TakeInstructionDataArgs,
  TakeInstructionData
> {
  return mapSerializer<TakeInstructionDataArgs, any, TakeInstructionData>(
    struct<TakeInstructionData>([['discriminator', bytes({ size: 1 })]], {
      description: 'TakeInstructionData',
    }),
    (value) => ({ ...value, discriminator: new Uint8Array([1]) })
  ) as Serializer<TakeInstructionDataArgs, TakeInstructionData>;
}

// Instruction.
export function take(
  context: Pick<Context, 'eddsa' | 'programs'>,
  input: TakeInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'blueshiftAnchorEscrow',
    'HKCR1vRz682tuHzgxEFTGra2dFJdwLcPvtqYiqc9Yyy4'
  );

  // Accounts.
  const resolvedAccounts = {
    taker: {
      index: 0,
      isWritable: true as boolean,
      value: input.taker ?? null,
    },
    maker: {
      index: 1,
      isWritable: true as boolean,
      value: input.maker ?? null,
    },
    escrow: {
      index: 2,
      isWritable: true as boolean,
      value: input.escrow ?? null,
    },
    mintA: {
      index: 3,
      isWritable: false as boolean,
      value: input.mintA ?? null,
    },
    mintB: {
      index: 4,
      isWritable: false as boolean,
      value: input.mintB ?? null,
    },
    vault: {
      index: 5,
      isWritable: true as boolean,
      value: input.vault ?? null,
    },
    takerAtaA: {
      index: 6,
      isWritable: true as boolean,
      value: input.takerAtaA ?? null,
    },
    takerAtaB: {
      index: 7,
      isWritable: true as boolean,
      value: input.takerAtaB ?? null,
    },
    makerAtaB: {
      index: 8,
      isWritable: true as boolean,
      value: input.makerAtaB ?? null,
    },
    associatedTokenProgram: {
      index: 9,
      isWritable: false as boolean,
      value: input.associatedTokenProgram ?? null,
    },
    tokenProgram: {
      index: 10,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    systemProgram: {
      index: 11,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.vault.value) {
    resolvedAccounts.vault.value = context.eddsa.findPda(
      context.programs.getPublicKey(
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
      ),
      [
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.escrow.value)
        ),
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.tokenProgram.value)
        ),
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.mintA.value)
        ),
      ]
    );
  }
  if (!resolvedAccounts.takerAtaA.value) {
    resolvedAccounts.takerAtaA.value = context.eddsa.findPda(
      context.programs.getPublicKey(
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
      ),
      [
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.taker.value)
        ),
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.tokenProgram.value)
        ),
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.mintA.value)
        ),
      ]
    );
  }
  if (!resolvedAccounts.takerAtaB.value) {
    resolvedAccounts.takerAtaB.value = context.eddsa.findPda(
      context.programs.getPublicKey(
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
      ),
      [
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.taker.value)
        ),
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.tokenProgram.value)
        ),
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.mintB.value)
        ),
      ]
    );
  }
  if (!resolvedAccounts.makerAtaB.value) {
    resolvedAccounts.makerAtaB.value = context.eddsa.findPda(
      context.programs.getPublicKey(
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
      ),
      [
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.maker.value)
        ),
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.tokenProgram.value)
        ),
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.mintB.value)
        ),
      ]
    );
  }
  if (!resolvedAccounts.associatedTokenProgram.value) {
    resolvedAccounts.associatedTokenProgram.value =
      context.programs.getPublicKey(
        'associatedTokenProgram',
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
      );
    resolvedAccounts.associatedTokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getTakeInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
