//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct Make {
      
              
          pub maker: solana_program::pubkey::Pubkey,
          
              
          pub escrow: solana_program::pubkey::Pubkey,
          
              
          pub mint_a: solana_program::pubkey::Pubkey,
          
              
          pub mint_b: solana_program::pubkey::Pubkey,
          
              
          pub maker_ata_a: solana_program::pubkey::Pubkey,
          
              
          pub vault: solana_program::pubkey::Pubkey,
          
              
          pub associated_token_program: solana_program::pubkey::Pubkey,
          
              
          pub token_program: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
      }

impl Make {
  pub fn instruction(&self, args: MakeInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: MakeInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(9+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.maker,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.escrow,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint_a,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint_b,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.maker_ata_a,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.vault,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&MakeInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::BLUESHIFT_ANCHOR_ESCROW_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct MakeInstructionData {
            discriminator: [u8; 1],
                        }

impl MakeInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [0],
                                                            }
  }
}

impl Default for MakeInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct MakeInstructionArgs {
                  pub seed: u64,
                pub recieve: u64,
                pub amount: u64,
      }


/// Instruction builder for `Make`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` maker
                ///   1. `[writable]` escrow
          ///   2. `[]` mint_a
          ///   3. `[]` mint_b
                ///   4. `[writable]` maker_ata_a
                ///   5. `[writable]` vault
                ///   6. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
          ///   7. `[]` token_program
                ///   8. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct MakeBuilder {
            maker: Option<solana_program::pubkey::Pubkey>,
                escrow: Option<solana_program::pubkey::Pubkey>,
                mint_a: Option<solana_program::pubkey::Pubkey>,
                mint_b: Option<solana_program::pubkey::Pubkey>,
                maker_ata_a: Option<solana_program::pubkey::Pubkey>,
                vault: Option<solana_program::pubkey::Pubkey>,
                associated_token_program: Option<solana_program::pubkey::Pubkey>,
                token_program: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                        seed: Option<u64>,
                recieve: Option<u64>,
                amount: Option<u64>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl MakeBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn maker(&mut self, maker: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.maker = Some(maker);
                    self
    }
            #[inline(always)]
    pub fn escrow(&mut self, escrow: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.escrow = Some(escrow);
                    self
    }
            #[inline(always)]
    pub fn mint_a(&mut self, mint_a: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.mint_a = Some(mint_a);
                    self
    }
            #[inline(always)]
    pub fn mint_b(&mut self, mint_b: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.mint_b = Some(mint_b);
                    self
    }
            #[inline(always)]
    pub fn maker_ata_a(&mut self, maker_ata_a: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.maker_ata_a = Some(maker_ata_a);
                    self
    }
            #[inline(always)]
    pub fn vault(&mut self, vault: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.vault = Some(vault);
                    self
    }
            /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
#[inline(always)]
    pub fn associated_token_program(&mut self, associated_token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.associated_token_program = Some(associated_token_program);
                    self
    }
            #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn seed(&mut self, seed: u64) -> &mut Self {
        self.seed = Some(seed);
        self
      }
                #[inline(always)]
      pub fn recieve(&mut self, recieve: u64) -> &mut Self {
        self.recieve = Some(recieve);
        self
      }
                #[inline(always)]
      pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.amount = Some(amount);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = Make {
                              maker: self.maker.expect("maker is not set"),
                                        escrow: self.escrow.expect("escrow is not set"),
                                        mint_a: self.mint_a.expect("mint_a is not set"),
                                        mint_b: self.mint_b.expect("mint_b is not set"),
                                        maker_ata_a: self.maker_ata_a.expect("maker_ata_a is not set"),
                                        vault: self.vault.expect("vault is not set"),
                                        associated_token_program: self.associated_token_program.unwrap_or(solana_program::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL")),
                                        token_program: self.token_program.expect("token_program is not set"),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                      };
          let args = MakeInstructionArgs {
                                                              seed: self.seed.clone().expect("seed is not set"),
                                                                  recieve: self.recieve.clone().expect("recieve is not set"),
                                                                  amount: self.amount.clone().expect("amount is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `make` CPI accounts.
  pub struct MakeCpiAccounts<'a, 'b> {
          
                    
              pub maker: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub escrow: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub mint_a: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub mint_b: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub maker_ata_a: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub vault: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `make` CPI instruction.
pub struct MakeCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub maker: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub escrow: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub mint_a: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub mint_b: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub maker_ata_a: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub vault: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: MakeInstructionArgs,
  }

impl<'a, 'b> MakeCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: MakeCpiAccounts<'a, 'b>,
              args: MakeInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              maker: accounts.maker,
              escrow: accounts.escrow,
              mint_a: accounts.mint_a,
              mint_b: accounts.mint_b,
              maker_ata_a: accounts.maker_ata_a,
              vault: accounts.vault,
              associated_token_program: accounts.associated_token_program,
              token_program: accounts.token_program,
              system_program: accounts.system_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(9+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.maker.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.escrow.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint_a.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint_b.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.maker_ata_a.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vault.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&MakeInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::BLUESHIFT_ANCHOR_ESCROW_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(10 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.maker.clone());
                        account_infos.push(self.escrow.clone());
                        account_infos.push(self.mint_a.clone());
                        account_infos.push(self.mint_b.clone());
                        account_infos.push(self.maker_ata_a.clone());
                        account_infos.push(self.vault.clone());
                        account_infos.push(self.associated_token_program.clone());
                        account_infos.push(self.token_program.clone());
                        account_infos.push(self.system_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `Make` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` maker
                ///   1. `[writable]` escrow
          ///   2. `[]` mint_a
          ///   3. `[]` mint_b
                ///   4. `[writable]` maker_ata_a
                ///   5. `[writable]` vault
          ///   6. `[]` associated_token_program
          ///   7. `[]` token_program
          ///   8. `[]` system_program
#[derive(Clone, Debug)]
pub struct MakeCpiBuilder<'a, 'b> {
  instruction: Box<MakeCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> MakeCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(MakeCpiBuilderInstruction {
      __program: program,
              maker: None,
              escrow: None,
              mint_a: None,
              mint_b: None,
              maker_ata_a: None,
              vault: None,
              associated_token_program: None,
              token_program: None,
              system_program: None,
                                            seed: None,
                                recieve: None,
                                amount: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn maker(&mut self, maker: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.maker = Some(maker);
                    self
    }
      #[inline(always)]
    pub fn escrow(&mut self, escrow: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.escrow = Some(escrow);
                    self
    }
      #[inline(always)]
    pub fn mint_a(&mut self, mint_a: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.mint_a = Some(mint_a);
                    self
    }
      #[inline(always)]
    pub fn mint_b(&mut self, mint_b: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.mint_b = Some(mint_b);
                    self
    }
      #[inline(always)]
    pub fn maker_ata_a(&mut self, maker_ata_a: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.maker_ata_a = Some(maker_ata_a);
                    self
    }
      #[inline(always)]
    pub fn vault(&mut self, vault: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.vault = Some(vault);
                    self
    }
      #[inline(always)]
    pub fn associated_token_program(&mut self, associated_token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.associated_token_program = Some(associated_token_program);
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn seed(&mut self, seed: u64) -> &mut Self {
        self.instruction.seed = Some(seed);
        self
      }
                #[inline(always)]
      pub fn recieve(&mut self, recieve: u64) -> &mut Self {
        self.instruction.recieve = Some(recieve);
        self
      }
                #[inline(always)]
      pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.instruction.amount = Some(amount);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = MakeInstructionArgs {
                                                              seed: self.instruction.seed.clone().expect("seed is not set"),
                                                                  recieve: self.instruction.recieve.clone().expect("recieve is not set"),
                                                                  amount: self.instruction.amount.clone().expect("amount is not set"),
                                    };
        let instruction = MakeCpi {
        __program: self.instruction.__program,
                  
          maker: self.instruction.maker.expect("maker is not set"),
                  
          escrow: self.instruction.escrow.expect("escrow is not set"),
                  
          mint_a: self.instruction.mint_a.expect("mint_a is not set"),
                  
          mint_b: self.instruction.mint_b.expect("mint_b is not set"),
                  
          maker_ata_a: self.instruction.maker_ata_a.expect("maker_ata_a is not set"),
                  
          vault: self.instruction.vault.expect("vault is not set"),
                  
          associated_token_program: self.instruction.associated_token_program.expect("associated_token_program is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct MakeCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            maker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                escrow: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                mint_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                mint_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                maker_ata_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        seed: Option<u64>,
                recieve: Option<u64>,
                amount: Option<u64>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

