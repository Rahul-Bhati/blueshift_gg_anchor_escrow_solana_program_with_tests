/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { BLUESHIFT_ANCHOR_ESCROW_PROGRAM_ADDRESS } from '../programs';

/** InvalidAmount: Invalid amount */
export const BLUESHIFT_ANCHOR_ESCROW_ERROR__INVALID_AMOUNT = 0x1770; // 6000
/** InvalidMaker: Invalid maker */
export const BLUESHIFT_ANCHOR_ESCROW_ERROR__INVALID_MAKER = 0x1771; // 6001
/** InvalidMintA: Invalid mint a */
export const BLUESHIFT_ANCHOR_ESCROW_ERROR__INVALID_MINT_A = 0x1772; // 6002
/** InvalidMintB: Invalid mint b */
export const BLUESHIFT_ANCHOR_ESCROW_ERROR__INVALID_MINT_B = 0x1773; // 6003

export type BlueshiftAnchorEscrowError =
  | typeof BLUESHIFT_ANCHOR_ESCROW_ERROR__INVALID_AMOUNT
  | typeof BLUESHIFT_ANCHOR_ESCROW_ERROR__INVALID_MAKER
  | typeof BLUESHIFT_ANCHOR_ESCROW_ERROR__INVALID_MINT_A
  | typeof BLUESHIFT_ANCHOR_ESCROW_ERROR__INVALID_MINT_B;

let blueshiftAnchorEscrowErrorMessages:
  | Record<BlueshiftAnchorEscrowError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  blueshiftAnchorEscrowErrorMessages = {
    [BLUESHIFT_ANCHOR_ESCROW_ERROR__INVALID_AMOUNT]: `Invalid amount`,
    [BLUESHIFT_ANCHOR_ESCROW_ERROR__INVALID_MAKER]: `Invalid maker`,
    [BLUESHIFT_ANCHOR_ESCROW_ERROR__INVALID_MINT_A]: `Invalid mint a`,
    [BLUESHIFT_ANCHOR_ESCROW_ERROR__INVALID_MINT_B]: `Invalid mint b`,
  };
}

export function getBlueshiftAnchorEscrowErrorMessage(
  code: BlueshiftAnchorEscrowError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      blueshiftAnchorEscrowErrorMessages as Record<
        BlueshiftAnchorEscrowError,
        string
      >
    )[code];
  }

  return 'Error message not available in production bundles.';
}

export function isBlueshiftAnchorEscrowError<
  TProgramErrorCode extends BlueshiftAnchorEscrowError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    BLUESHIFT_ANCHOR_ESCROW_PROGRAM_ADDRESS,
    code
  );
}
