/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { BLUESHIFT_ANCHOR_ESCROW_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const REFUND_DISCRIMINATOR = new Uint8Array([2]);

export function getRefundDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(REFUND_DISCRIMINATOR);
}

export type RefundInstruction<
  TProgram extends string = typeof BLUESHIFT_ANCHOR_ESCROW_PROGRAM_ADDRESS,
  TAccountMaker extends string | IAccountMeta<string> = string,
  TAccountEscrow extends string | IAccountMeta<string> = string,
  TAccountMintA extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountMakerAtaA extends string | IAccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountMaker extends string
        ? WritableSignerAccount<TAccountMaker> &
            IAccountSignerMeta<TAccountMaker>
        : TAccountMaker,
      TAccountEscrow extends string
        ? WritableAccount<TAccountEscrow>
        : TAccountEscrow,
      TAccountMintA extends string
        ? ReadonlyAccount<TAccountMintA>
        : TAccountMintA,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountMakerAtaA extends string
        ? WritableAccount<TAccountMakerAtaA>
        : TAccountMakerAtaA,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RefundInstructionData = { discriminator: ReadonlyUint8Array };

export type RefundInstructionDataArgs = {};

export function getRefundInstructionDataEncoder(): Encoder<RefundInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 1)]]),
    (value) => ({ ...value, discriminator: REFUND_DISCRIMINATOR })
  );
}

export function getRefundInstructionDataDecoder(): Decoder<RefundInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 1)],
  ]);
}

export function getRefundInstructionDataCodec(): Codec<
  RefundInstructionDataArgs,
  RefundInstructionData
> {
  return combineCodec(
    getRefundInstructionDataEncoder(),
    getRefundInstructionDataDecoder()
  );
}

export type RefundAsyncInput<
  TAccountMaker extends string = string,
  TAccountEscrow extends string = string,
  TAccountMintA extends string = string,
  TAccountVault extends string = string,
  TAccountMakerAtaA extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  maker: TransactionSigner<TAccountMaker>;
  escrow: Address<TAccountEscrow>;
  /** Token Accounts */
  mintA: Address<TAccountMintA>;
  vault?: Address<TAccountVault>;
  makerAtaA?: Address<TAccountMakerAtaA>;
  /** Programs */
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getRefundInstructionAsync<
  TAccountMaker extends string,
  TAccountEscrow extends string,
  TAccountMintA extends string,
  TAccountVault extends string,
  TAccountMakerAtaA extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof BLUESHIFT_ANCHOR_ESCROW_PROGRAM_ADDRESS,
>(
  input: RefundAsyncInput<
    TAccountMaker,
    TAccountEscrow,
    TAccountMintA,
    TAccountVault,
    TAccountMakerAtaA,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  RefundInstruction<
    TProgramAddress,
    TAccountMaker,
    TAccountEscrow,
    TAccountMintA,
    TAccountVault,
    TAccountMakerAtaA,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? BLUESHIFT_ANCHOR_ESCROW_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    maker: { value: input.maker ?? null, isWritable: true },
    escrow: { value: input.escrow ?? null, isWritable: true },
    mintA: { value: input.mintA ?? null, isWritable: false },
    vault: { value: input.vault ?? null, isWritable: true },
    makerAtaA: { value: input.makerAtaA ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.escrow.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintA.value)),
      ],
    });
  }
  if (!accounts.makerAtaA.value) {
    accounts.makerAtaA.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.maker.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintA.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.maker),
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.makerAtaA),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getRefundInstructionDataEncoder().encode({}),
  } as RefundInstruction<
    TProgramAddress,
    TAccountMaker,
    TAccountEscrow,
    TAccountMintA,
    TAccountVault,
    TAccountMakerAtaA,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type RefundInput<
  TAccountMaker extends string = string,
  TAccountEscrow extends string = string,
  TAccountMintA extends string = string,
  TAccountVault extends string = string,
  TAccountMakerAtaA extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  maker: TransactionSigner<TAccountMaker>;
  escrow: Address<TAccountEscrow>;
  /** Token Accounts */
  mintA: Address<TAccountMintA>;
  vault: Address<TAccountVault>;
  makerAtaA: Address<TAccountMakerAtaA>;
  /** Programs */
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getRefundInstruction<
  TAccountMaker extends string,
  TAccountEscrow extends string,
  TAccountMintA extends string,
  TAccountVault extends string,
  TAccountMakerAtaA extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof BLUESHIFT_ANCHOR_ESCROW_PROGRAM_ADDRESS,
>(
  input: RefundInput<
    TAccountMaker,
    TAccountEscrow,
    TAccountMintA,
    TAccountVault,
    TAccountMakerAtaA,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RefundInstruction<
  TProgramAddress,
  TAccountMaker,
  TAccountEscrow,
  TAccountMintA,
  TAccountVault,
  TAccountMakerAtaA,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? BLUESHIFT_ANCHOR_ESCROW_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    maker: { value: input.maker ?? null, isWritable: true },
    escrow: { value: input.escrow ?? null, isWritable: true },
    mintA: { value: input.mintA ?? null, isWritable: false },
    vault: { value: input.vault ?? null, isWritable: true },
    makerAtaA: { value: input.makerAtaA ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.maker),
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.makerAtaA),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getRefundInstructionDataEncoder().encode({}),
  } as RefundInstruction<
    TProgramAddress,
    TAccountMaker,
    TAccountEscrow,
    TAccountMintA,
    TAccountVault,
    TAccountMakerAtaA,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedRefundInstruction<
  TProgram extends string = typeof BLUESHIFT_ANCHOR_ESCROW_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    maker: TAccountMetas[0];
    escrow: TAccountMetas[1];
    /** Token Accounts */
    mintA: TAccountMetas[2];
    vault: TAccountMetas[3];
    makerAtaA: TAccountMetas[4];
    /** Programs */
    associatedTokenProgram: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
  };
  data: RefundInstructionData;
};

export function parseRefundInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedRefundInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      maker: getNextAccount(),
      escrow: getNextAccount(),
      mintA: getNextAccount(),
      vault: getNextAccount(),
      makerAtaA: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getRefundInstructionDataDecoder().decode(instruction.data),
  };
}
