/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedMakeInstruction,
  type ParsedRefundInstruction,
  type ParsedTakeInstruction,
} from '../instructions';

export const BLUESHIFT_ANCHOR_ESCROW_PROGRAM_ADDRESS =
  'HKCR1vRz682tuHzgxEFTGra2dFJdwLcPvtqYiqc9Yyy4' as Address<'HKCR1vRz682tuHzgxEFTGra2dFJdwLcPvtqYiqc9Yyy4'>;

export enum BlueshiftAnchorEscrowAccount {
  Escrow,
}

export function identifyBlueshiftAnchorEscrowAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): BlueshiftAnchorEscrowAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 1).encode(new Uint8Array([1])),
      0
    )
  ) {
    return BlueshiftAnchorEscrowAccount.Escrow;
  }
  throw new Error(
    'The provided account could not be identified as a blueshiftAnchorEscrow account.'
  );
}

export enum BlueshiftAnchorEscrowInstruction {
  Make,
  Refund,
  Take,
}

export function identifyBlueshiftAnchorEscrowInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): BlueshiftAnchorEscrowInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 1).encode(new Uint8Array([0])),
      0
    )
  ) {
    return BlueshiftAnchorEscrowInstruction.Make;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 1).encode(new Uint8Array([2])),
      0
    )
  ) {
    return BlueshiftAnchorEscrowInstruction.Refund;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 1).encode(new Uint8Array([1])),
      0
    )
  ) {
    return BlueshiftAnchorEscrowInstruction.Take;
  }
  throw new Error(
    'The provided instruction could not be identified as a blueshiftAnchorEscrow instruction.'
  );
}

export type ParsedBlueshiftAnchorEscrowInstruction<
  TProgram extends string = 'HKCR1vRz682tuHzgxEFTGra2dFJdwLcPvtqYiqc9Yyy4',
> =
  | ({
      instructionType: BlueshiftAnchorEscrowInstruction.Make;
    } & ParsedMakeInstruction<TProgram>)
  | ({
      instructionType: BlueshiftAnchorEscrowInstruction.Refund;
    } & ParsedRefundInstruction<TProgram>)
  | ({
      instructionType: BlueshiftAnchorEscrowInstruction.Take;
    } & ParsedTakeInstruction<TProgram>);
